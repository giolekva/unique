// gen

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/giolekva/unique/operator/apis/unique/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CountUniqueLister helps list CountUniques.
// All objects returned here must be treated as read-only.
type CountUniqueLister interface {
	// List lists all CountUniques in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.CountUnique, err error)
	// CountUniques returns an object that can list and get CountUniques.
	CountUniques(namespace string) CountUniqueNamespaceLister
	CountUniqueListerExpansion
}

// countUniqueLister implements the CountUniqueLister interface.
type countUniqueLister struct {
	indexer cache.Indexer
}

// NewCountUniqueLister returns a new CountUniqueLister.
func NewCountUniqueLister(indexer cache.Indexer) CountUniqueLister {
	return &countUniqueLister{indexer: indexer}
}

// List lists all CountUniques in the indexer.
func (s *countUniqueLister) List(selector labels.Selector) (ret []*v1.CountUnique, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CountUnique))
	})
	return ret, err
}

// CountUniques returns an object that can list and get CountUniques.
func (s *countUniqueLister) CountUniques(namespace string) CountUniqueNamespaceLister {
	return countUniqueNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CountUniqueNamespaceLister helps list and get CountUniques.
// All objects returned here must be treated as read-only.
type CountUniqueNamespaceLister interface {
	// List lists all CountUniques in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.CountUnique, err error)
	// Get retrieves the CountUnique from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.CountUnique, error)
	CountUniqueNamespaceListerExpansion
}

// countUniqueNamespaceLister implements the CountUniqueNamespaceLister
// interface.
type countUniqueNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CountUniques in the indexer for a given namespace.
func (s countUniqueNamespaceLister) List(selector labels.Selector) (ret []*v1.CountUnique, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CountUnique))
	})
	return ret, err
}

// Get retrieves the CountUnique from the indexer for a given namespace and name.
func (s countUniqueNamespaceLister) Get(name string) (*v1.CountUnique, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("countunique"), name)
	}
	return obj.(*v1.CountUnique), nil
}
